/**
 * Bitcoind
 * The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.
 *
 * OpenAPI spec version: 0.16
 * Contact: johan@lepetitbloc.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.BitcoindRestClient) {
      root.BitcoindRestClient = {};
    }
    root.BitcoindRestClient.Transaction = factory(root.BitcoindRestClient.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Transaction model module.
   * @module model/Transaction
   * @version 0.16
   */

  /**
   * Constructs a new <code>Transaction</code>.
   * @alias module:model/Transaction
   * @class
   */
  var exports = function() {
    var _this = this;
















  };

  /**
   * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Transaction} obj Optional instance to populate.
   * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('amount')) {
        obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
      }
      if (data.hasOwnProperty('fee')) {
        obj['fee'] = ApiClient.convertToType(data['fee'], 'Number');
      }
      if (data.hasOwnProperty('confirmations')) {
        obj['confirmations'] = ApiClient.convertToType(data['confirmations'], 'Number');
      }
      if (data.hasOwnProperty('blockhash')) {
        obj['blockhash'] = ApiClient.convertToType(data['blockhash'], 'String');
      }
      if (data.hasOwnProperty('blockindex')) {
        obj['blockindex'] = ApiClient.convertToType(data['blockindex'], 'Number');
      }
      if (data.hasOwnProperty('blocktime')) {
        obj['blocktime'] = ApiClient.convertToType(data['blocktime'], 'Number');
      }
      if (data.hasOwnProperty('txid')) {
        obj['txid'] = ApiClient.convertToType(data['txid'], 'String');
      }
      if (data.hasOwnProperty('txhash')) {
        obj['txhash'] = ApiClient.convertToType(data['txhash'], 'String');
      }
      if (data.hasOwnProperty('version')) {
        obj['version'] = ApiClient.convertToType(data['version'], 'Number');
      }
      if (data.hasOwnProperty('size')) {
        obj['size'] = ApiClient.convertToType(data['size'], 'Number');
      }
      if (data.hasOwnProperty('vsize')) {
        obj['vsize'] = ApiClient.convertToType(data['vsize'], 'Number');
      }
      if (data.hasOwnProperty('locktime')) {
        obj['locktime'] = ApiClient.convertToType(data['locktime'], 'Number');
      }
      if (data.hasOwnProperty('time')) {
        obj['time'] = ApiClient.convertToType(data['time'], 'Number');
      }
      if (data.hasOwnProperty('timereceived')) {
        obj['timereceived'] = ApiClient.convertToType(data['timereceived'], 'Number');
      }
      if (data.hasOwnProperty('bip125-replaceable')) {
        obj['bip125-replaceable'] = ApiClient.convertToType(data['bip125-replaceable'], 'String');
      }
    }
    return obj;
  }

  /**
   * The transaction amount in BTC
   * @member {Number} amount
   */
  exports.prototype['amount'] = undefined;
  /**
   * The amount of the fee in BTC. This is negative and only available for the send category of transactions.
   * @member {Number} fee
   */
  exports.prototype['fee'] = undefined;
  /**
   * The number of confirmations
   * @member {Number} confirmations
   */
  exports.prototype['confirmations'] = undefined;
  /**
   * The block hash
   * @member {String} blockhash
   */
  exports.prototype['blockhash'] = undefined;
  /**
   * The index of the transaction in the block that includes it
   * @member {Number} blockindex
   */
  exports.prototype['blockindex'] = undefined;
  /**
   * The time in seconds since epoch (1 Jan 1970 GMT)
   * @member {Number} blocktime
   */
  exports.prototype['blocktime'] = undefined;
  /**
   * The transaction id
   * @member {String} txid
   */
  exports.prototype['txid'] = undefined;
  /**
   * The transaction hash
   * @member {String} txhash
   */
  exports.prototype['txhash'] = undefined;
  /**
   * @member {Number} version
   */
  exports.prototype['version'] = undefined;
  /**
   * @member {Number} size
   */
  exports.prototype['size'] = undefined;
  /**
   * @member {Number} vsize
   */
  exports.prototype['vsize'] = undefined;
  /**
   * @member {Number} locktime
   */
  exports.prototype['locktime'] = undefined;
  /**
   * The transaction time in seconds since epoch (1 Jan 1970 GMT)
   * @member {Number} time
   */
  exports.prototype['time'] = undefined;
  /**
   * The time received in seconds since epoch (1 Jan 1970 GMT)
   * @member {Number} timereceived
   */
  exports.prototype['timereceived'] = undefined;
  /**
   * Whether this transaction could be replaced due to BIP125 (replace-by-fee); may be unknown for unconfirmed transactions not in the mempool
   * @member {module:model/Transaction.Bip125ReplaceableEnum} bip125-replaceable
   */
  exports.prototype['bip125-replaceable'] = undefined;


  /**
   * Allowed values for the <code>bip125-replaceable</code> property.
   * @enum {String}
   * @readonly
   */
  exports.Bip125ReplaceableEnum = {
    /**
     * value: "yes"
     * @const
     */
    "yes": "yes",
    /**
     * value: "no"
     * @const
     */
    "no": "no",
    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"  };


  return exports;
}));


