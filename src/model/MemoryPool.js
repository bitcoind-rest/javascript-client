/**
 * Bitcoind
 * The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.
 *
 * OpenAPI spec version: 0.16
 * Contact: johan@lepetitbloc.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.BitcoindRestClient) {
      root.BitcoindRestClient = {};
    }
    root.BitcoindRestClient.MemoryPool = factory(root.BitcoindRestClient.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The MemoryPool model module.
   * @module model/MemoryPool
   * @version 0.16
   */

  /**
   * Constructs a new <code>MemoryPool</code>.
   * @alias module:model/MemoryPool
   * @class
   */
  var exports = function() {
    var _this = this;







  };

  /**
   * Constructs a <code>MemoryPool</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MemoryPool} obj Optional instance to populate.
   * @return {module:model/MemoryPool} The populated <code>MemoryPool</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('size')) {
        obj['size'] = ApiClient.convertToType(data['size'], 'Number');
      }
      if (data.hasOwnProperty('bytes')) {
        obj['bytes'] = ApiClient.convertToType(data['bytes'], 'Number');
      }
      if (data.hasOwnProperty('usage')) {
        obj['usage'] = ApiClient.convertToType(data['usage'], 'Number');
      }
      if (data.hasOwnProperty('maxmempool')) {
        obj['maxmempool'] = ApiClient.convertToType(data['maxmempool'], 'Number');
      }
      if (data.hasOwnProperty('mempoolminfee')) {
        obj['mempoolminfee'] = ApiClient.convertToType(data['mempoolminfee'], 'Number');
      }
      if (data.hasOwnProperty('minrelaytxfee')) {
        obj['minrelaytxfee'] = ApiClient.convertToType(data['minrelaytxfee'], 'Number');
      }
    }
    return obj;
  }

  /**
   * the number of transactions in the TX mempool
   * @member {Number} size
   */
  exports.prototype['size'] = undefined;
  /**
   * size of the TX mempool in bytes
   * @member {Number} bytes
   */
  exports.prototype['bytes'] = undefined;
  /**
   * total TX mempool memory usage
   * @member {Number} usage
   */
  exports.prototype['usage'] = undefined;
  /**
   * maximum memory usage for the mempool in bytes
   * @member {Number} maxmempool
   */
  exports.prototype['maxmempool'] = undefined;
  /**
   * minimum feerate (BTC per KB) for tx to be accepted
   * @member {Number} mempoolminfee
   */
  exports.prototype['mempoolminfee'] = undefined;
  /**
   * @member {Number} minrelaytxfee
   */
  exports.prototype['minrelaytxfee'] = undefined;



  return exports;
}));


