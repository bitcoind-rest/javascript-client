/**
 * Bitcoind
 * The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.
 *
 * OpenAPI spec version: 0.16
 * Contact: johan@lepetitbloc.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Transaction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Transaction'));
  } else {
    // Browser globals (root is window)
    if (!root.BitcoindRestClient) {
      root.BitcoindRestClient = {};
    }
    root.BitcoindRestClient.Block = factory(root.BitcoindRestClient.ApiClient, root.BitcoindRestClient.Transaction);
  }
}(this, function(ApiClient, Transaction) {
  'use strict';




  /**
   * The Block model module.
   * @module model/Block
   * @version 0.16
   */

  /**
   * Constructs a new <code>Block</code>.
   * @alias module:model/Block
   * @class
   */
  var exports = function() {
    var _this = this;

















  };

  /**
   * Constructs a <code>Block</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Block} obj Optional instance to populate.
   * @return {module:model/Block} The populated <code>Block</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('hash')) {
        obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
      }
      if (data.hasOwnProperty('confirmations')) {
        obj['confirmations'] = ApiClient.convertToType(data['confirmations'], 'Number');
      }
      if (data.hasOwnProperty('strippedsize')) {
        obj['strippedsize'] = ApiClient.convertToType(data['strippedsize'], 'Number');
      }
      if (data.hasOwnProperty('size')) {
        obj['size'] = ApiClient.convertToType(data['size'], 'Number');
      }
      if (data.hasOwnProperty('weight')) {
        obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
      }
      if (data.hasOwnProperty('height')) {
        obj['height'] = ApiClient.convertToType(data['height'], 'Number');
      }
      if (data.hasOwnProperty('version')) {
        obj['version'] = ApiClient.convertToType(data['version'], 'Number');
      }
      if (data.hasOwnProperty('versionHex')) {
        obj['versionHex'] = ApiClient.convertToType(data['versionHex'], 'String');
      }
      if (data.hasOwnProperty('merkleroot')) {
        obj['merkleroot'] = ApiClient.convertToType(data['merkleroot'], 'String');
      }
      if (data.hasOwnProperty('tx')) {
        obj['tx'] = ApiClient.convertToType(data['tx'], [Transaction]);
      }
      if (data.hasOwnProperty('time')) {
        obj['time'] = ApiClient.convertToType(data['time'], 'Number');
      }
      if (data.hasOwnProperty('mediantime')) {
        obj['mediantime'] = ApiClient.convertToType(data['mediantime'], 'Number');
      }
      if (data.hasOwnProperty('nonce')) {
        obj['nonce'] = ApiClient.convertToType(data['nonce'], 'Number');
      }
      if (data.hasOwnProperty('bits')) {
        obj['bits'] = ApiClient.convertToType(data['bits'], 'String');
      }
      if (data.hasOwnProperty('difficulty')) {
        obj['difficulty'] = ApiClient.convertToType(data['difficulty'], 'Number');
      }
      if (data.hasOwnProperty('chainwork')) {
        obj['chainwork'] = ApiClient.convertToType(data['chainwork'], 'String');
      }
    }
    return obj;
  }

  /**
   * The block hash
   * @member {String} hash
   */
  exports.prototype['hash'] = undefined;
  /**
   * The number of confirmations
   * @member {Number} confirmations
   */
  exports.prototype['confirmations'] = undefined;
  /**
   * The block stripped size
   * @member {Number} strippedsize
   */
  exports.prototype['strippedsize'] = undefined;
  /**
   * The block size
   * @member {Number} size
   */
  exports.prototype['size'] = undefined;
  /**
   * The block weight
   * @member {Number} weight
   */
  exports.prototype['weight'] = undefined;
  /**
   * The block height (or index)
   * @member {Number} height
   */
  exports.prototype['height'] = undefined;
  /**
   * The block version
   * @member {Number} version
   */
  exports.prototype['version'] = undefined;
  /**
   * The block version (in hex)
   * @member {String} versionHex
   */
  exports.prototype['versionHex'] = undefined;
  /**
   * The block merkle root
   * @member {String} merkleroot
   */
  exports.prototype['merkleroot'] = undefined;
  /**
   * The list of transactions in the block
   * @member {Array.<module:model/Transaction>} tx
   */
  exports.prototype['tx'] = undefined;
  /**
   * The block time
   * @member {Number} time
   */
  exports.prototype['time'] = undefined;
  /**
   * The block median time
   * @member {Number} mediantime
   */
  exports.prototype['mediantime'] = undefined;
  /**
   * The block nonce
   * @member {Number} nonce
   */
  exports.prototype['nonce'] = undefined;
  /**
   * @member {String} bits
   */
  exports.prototype['bits'] = undefined;
  /**
   * @member {Number} difficulty
   */
  exports.prototype['difficulty'] = undefined;
  /**
   * @member {String} chainwork
   */
  exports.prototype['chainwork'] = undefined;



  return exports;
}));


